swagger: "2.0"
info:
  description: "Kubernetes Self Healing, application health check, ready to serve and resources limits"
  version: "1.0.0"
  title: "kubernetes-selfhealing-healthcheck-resourceslimits"
  contact:
    email: "josemarsilva@yahoo.com.br"
paths:

  /:
    get:
      description: "Home page"
      produces:
      - "text/plain"
      responses:
        "200":
          description: "Home Page - node-express-swagger-liveness-readiness-startup-probes"

  /health-check:
    get:
      description: "Probe if application is running?"
      produces:
      - "text/plain"
      responses:
        "200":
          description: "_health-check_ responds: Yes, application is running\nExample: OK - GET /health-check - <hostname>"

  /ready-to-serve:
    get:
      description: "Probe if application is ready to serve?"
      produces:
      - "text/plain"
      responses:
        "200":
          description: "_ready-to-serve_ responds: Yes, application ready to serve\nExample: OK - GET /ready-to-serve - <hostname>"

  /get-delayed/{seconds}:
    get:
      description: "Delay an amount of time and respond request"
      produces:
      - "text/plain"
      parameters:
      - name: "seconds"
        in: "path"
        description: "seconds amount of time in seconds"
        required: false
        type: "number"
      responses:
        "200":
          description: "_get-delayed_ delay an amount of time and respond request\nExample: OK - GET /get-delayed - <hostname>"

  /when-will-you-be-ready:
    get:
      description: "When will application be ready to serve?"
      produces:
      - "text/plain"
      responses:
        "200":
          description: "_when-will-you-be-ready_ responds: current datetime and readiness datetime. \nExample:  OK - {\"isHealthCheck\": True, \"is_ready_to_serve\": True}"

  /set-unhealth:
    put:
      description: "Set application in a **NOT running** mode"
      produces:
      - "text/plain"
      responses:
        "200":
          description: "_set-unhealth_ set application in a **NOT running** mode"

  /set-health:
    put:
      description: "Set application in a **running** mode"
      produces:
      - "text/plain"
      responses:
        "200":
          description: "_set-health_ set application in a **running** mode"

  /set-unready-for/{seconds}:
    put:
      description: "Set application in a **NOT ready-to-serve** mode for a time in seconds"
      produces:
      - "text/plain"
      parameters:
      - name: "seconds"
        in: "path"
        description: "seconds amount of time in seconds"
        required: false
        type: "number"
      responses:
        "200":
          description: "_set-unready-for_ set application in a **NOT ready-to-serve** mode for a time in seconds. \nExample: OK - PUT /set-unhealth - <hostname>"

  /stress/{type}/{lifespan}/{deathspan}/{iterations}:
    put:
      description: "Use Nodehog stress tools used to stress"
      produces:
      - "text/plain"
      parameters:
      - name: "type"
        in: "path"
        description: "type of object to stress. List of values: [ 'cpu' ]"
        required: true
        type: "string"
      - name: "lifespan"
        in: "path"
        description: "lifespan amount of time in seconds (application x 1000 milliseconds)"
        required: true
        type: "number"
      - name: "deathspan"
        in: "path"
        description: "deathspan amount of time in seconds (application x 1000 milliseconds)"
        required: true
        type: "number"
      - name: "iterations"
        in: "path"
        description: "iterations amount of interations integer number"
        required: true
        type: "number"
      responses:
        "200":
          description: "_stress_ stress CPU using Nodehog tools. \nExample: OK - PUT /stress/cpu/60/15/0 - <hostname>"
